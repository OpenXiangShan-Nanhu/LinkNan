`ifdef PALLADIUM
  `ifdef SYNTHESIS
  `define WIRE_CLK //clock will be generated by ixclkgen
  `endif // SYNTHESIS
`endif // PALLADIUM

module tb_top;

`ifdef WIRE_CLK
wire        clock;
`else
reg         clock;
`endif // WIRE_CLK
reg         reset;

`ifndef WIRE_CLK
initial begin
  clock = 0;
  #25;
  forever #2.5 clock = ~clock;
end
`endif // WIRE_CLK

// Note: reset delay #100 should be larger than RANDOMIZE_DELAY
`ifdef PALLADIUM
  `define RESET_COUNTER
`endif

`ifndef RESET_COUNTER
initial begin
  reset = 0;
  #0.5ns;
  reset = 1;
  #25ns;
  reset = 0;
end
`else
reg [7:0] reset_counter;

initial begin
  reset = 1;
  reset_counter = 0;
end

always @(posedge clock) begin
    reset_counter <= reset_counter + 8'd1;

    if (reset && (reset_counter == 8'd100)) begin
        reset <= 1'b0;
    end
end
`endif // RESET_COUNTER

SimTop sim(
    .clock(clock),
    .reset(reset)
);

initial begin
  #1000000
  $display("[pldm/debug_rtl/top.v] Finish simulation...");
  $finish;
end
    
endmodule

module SimTop(
    input wire clock,
    input wire reset
);

reg [63:0] cnt;
always@(posedge clock) begin
    if(reset) cnt <= 0;
    else cnt <= cnt + 1;
end

endmodule